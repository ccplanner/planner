;; defineing chips challenge domain
;; very simple

(define (domain chips-challenge)
  (:requirements :typing )
  (:types thing location direction number have-blue have-red have-yellow have-green - object
          player - thing)
  (:predicates (floor ?l - location)
               (at ?t - thing ?l - location)
               (chip ?l - location)
               (socket ?l - location)
               (wall ?l - location)
               (blue-key ?l - location)
               (blue-door ?l - location)
               (red-key ?l - location)
               (red-door ?l - location)
               (yellow-key ?l - location)
               (yellow-door ?l - location)
               (green-key ?l - location)
               (green-door ?l - location)
               (switch-wall-open ?l - location)
               (switch-wall-closed ?l - location)
               (switched-walls-open ?x - number )
               (successor ?n1 - number ?n0 - number)
               (chips-left ?n - number)
               (MOVE-DIR ?from ?to - location ?dir - direction))

  (:action move-floor
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (floor ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (not (chip-state slipping))
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      )
   )
  
  (:action move-socket
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (socket ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (chips-left n0)
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      (not (socket ?to))
                      (floor ?to)
                      )
   )

;; Ice
  (:action move-ice
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (ice ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (not (chip-state slipping))
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      (chip-state slipping)
                      (slipping-dir ?dir)
                      )
   )

  (:action slip-ice-ice
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (ice ?to)
                      (chip-state slipping)
                      (MOVE-DIR ?from ?to ?dir)
                      (slipping-dir ?dir)
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      )
   )

  (:action slip-ice-floor
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (floor ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (chip-state slipping)
                      (slipping-dir ?dir)
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      (not (slipping-dir ?dir))
                      (not (chip-state slipping))
                      )
   )

  (:action slip-ice-chip
   :parameters (?p - player ?from ?to - location ?dir - direction ?ochips ?nchips - number)
   :precondition (and (at ?p ?from)
                      (chip ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (chips-left ?ochips)
                      (successor ?nchips ?ochips)
                      (chip-state slipping)
                      (slipping-dir ?dir)
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      (not (chip ?to))
                      (floor ?to)
                      (not (chips-left ?ochips))
                      (chips-left ?nchips)
                      (not (slipping-dir ?dir))
                      (not (chip-state slipping))
                      )
   )

;; The switch walls
  (:action move-switch-wall-open
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (switch-wall-open ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (switched-walls-open n0)
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      )
   )

  (:action move-switch-wall-closed
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (switch-wall-closed ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (not (switched-walls-open n0))
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      )
   )

  (:action move-toggle-walls-open
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (green-button ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (not (switched-walls-open n0))
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      (switched-walls-open n0)
                      )
   )

  (:action move-toggle-walls-closed
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (green-button ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (switched-walls-open n0)
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      (not (switched-walls-open n0))
                      )
  )
   
;; handle having n0 chips
;; maybe make zero a succesor to itself
  (:action move-chip
   :parameters (?p - player ?from ?to - location ?dir - direction ?ochips ?nchips - number)
   :precondition (and (at ?p ?from)
                      (chip ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      (chips-left ?ochips)
                      (successor ?nchips ?ochips)
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      (not (chip ?to))
                      (floor ?to)
                      (not (chips-left ?ochips))
                      (chips-left ?nchips)
                      )
   )

  ;; NOT FINISHED
  (:action move-blue-key
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (blue-key ?to)
                      (MOVE-DIR ?from ?to ?dir)
                      )
   :effect       (and (not (at ?p ?from))
                      (at ?p ?to)
                      (not (blue-key ?to))
                      (floor ?to)
                      (have-blue True)
                      )
   )
)
